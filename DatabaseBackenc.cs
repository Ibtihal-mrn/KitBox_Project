using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using MySql.Data.MySqlClient;
using Backend.Models;

namespace Backend.Services
{
    public class DatabaseService
    {
        private readonly string _connectionString;

        public DatabaseService(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("DefaultConnection") ?? string.Empty;
            Console.WriteLine($"üìå Cha√Æne de connexion r√©cup√©r√©e : {_connectionString}");

            if (string.IsNullOrEmpty(_connectionString))
            {
                Console.WriteLine("‚ö†Ô∏è La cha√Æne de connexion est vide. V√©rifiez votre appsettings.json !");
            }
            else
            {
                TestConnexion();
            }
        }

        private void TestConnexion()
        {
            try
            {
                using (var connection = new MySqlConnection(_connectionString))
                {
                    connection.Open();
                    Console.WriteLine("‚úÖ Connexion MySQL test OK !");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erreur de connexion MySQL : {ex.Message}");
            }
        }

        public async Task<List<Fournisseur>> GetFournisseursAsync()
        {
            var fournisseurs = new List<Fournisseur>();

            try
            {
                using (var connection = new MySqlConnection(_connectionString))
                {
                    Console.WriteLine("üîÑ Tentative d'ouverture de la connexion...");
                    await connection.OpenAsync();
                    Console.WriteLine("‚úÖ Connexion r√©ussie √† la base de donn√©es.");

                    string query = "SELECT * FROM fournisseurs";
                    using (var command = new MySqlCommand(query, connection))
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        Console.WriteLine("üîç Ex√©cution de la requ√™te : " + query);

                        while (await reader.ReadAsync())
                        {
                            Console.WriteLine("üìå Lecture d'une ligne de r√©sultat...");
                            
                            var fournisseur = new Fournisseur
                            {
                                PK_Numero_fournisseur = reader.GetInt32(reader.GetOrdinal("PK_Numero_fournisseur")), // Num√©rique (INT)
                                Nom = reader.GetString(reader.GetOrdinal("Nom")), // Texte (VARCHAR)
                                Adresse = reader.GetString(reader.GetOrdinal("Adresse")), // Texte (VARCHAR)
                                Code_postal = reader.GetString(reader.GetOrdinal("Code_postal")), // Texte (VARCHAR)
                                Ville = reader.GetString(reader.GetOrdinal("Ville")), // Texte (VARCHAR)
                                Tel = reader.GetString(reader.GetOrdinal("Tel")) // Texte (VARCHAR)
                            };
                            fournisseurs.Add(fournisseur);
                            Console.WriteLine($"‚úÖ Fournisseur r√©cup√©r√© : {fournisseur.Nom}");
                        }
                    }
                }
            }
            catch (Exception ex) // üõ† Ajout du catch ici
            {
                Console.WriteLine($"‚ùå Erreur SQL : {ex.Message}");
            } // üõ† Assurez-vous que le catch ferme bien le try

            return fournisseurs;
        }
    }
    
}