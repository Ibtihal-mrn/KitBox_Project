
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:viewModels="clr-namespace:KitBox_Project.ViewModels;assembly=KitBox_Project"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="KitBox_Project.Views.MainWindow"
        Title="{Binding Title}"
        x:DataType="viewModels:MainViewModel"
        Background = "LightGray">

   <!-- Style global appliqué aux boutons du menu : Tous les boutons s'adaptent automatiquement à la largeur du menu, garantissant une apparence uniforme sans avoir à les modifier individuellement. Idéal pour maintenir un design cohérent, surtout en cas de nombreux boutons. Si je dois faire individuellement, je dois ajouter HorizontalAlignment="Stretch" à chaque bouton. -->
    <Window.Styles>
        <Style Selector="SplitView > StackPanel > Button">
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
        </Style>
    </Window.Styles>

    <Grid>
        <!-- Menu pour l'app côté-->
        <!-- Bouton ☰ pour ouvrir/fermer le menu -->
        <Button x:Name="MenuButton"
                Content="☰"
                FontSize="14"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Margin="10"
                Click="ToggleMenu"
                ZIndex="2"
                IsVisible ="False"/>

        <!-- Le SplitView gère le menu coulissant -->
        <SplitView x:Name="MenuPanel"
                   DisplayMode="Overlay"
                   IsPaneOpen="False"
                   OpenPaneLength="170"
                   CompactPaneLength="0"
                   PanePlacement="Left"
                   ZIndex="1"
                   IsVisible="False">

            <!-- Le contenu du menu DOIT être mis dans Pane -->
            <SplitView.Pane>
                <StackPanel Background="LightGray">
                    <Button x:Name="HomeButton" Content="Home" Background="Transparent" Margin="0,45,0,0" Click="GoToHome" IsVisible="False"/>
                    <Button x:Name="InspiButton" Content="Inspirations" Background="Transparent" Click="GoToInspirations" IsVisible="False"/>
                    <Button x:Name="DesignButton" Content="Design Your Wardrobe" Background="Transparent" Click="GoToColor" IsVisible="False"/>
                    <Button x:Name="SupportButton" Content="Help &amp; Support" Background="Transparent" Click="GoToHelpSupport" IsVisible="False"/>
                    <Button x:Name="OrderButton" Content="Order" Margin="0,45,0,0" Background="Transparent" IsVisible="False" Click="GoToOrder"/>
                    <Button x:Name="StockButton" Content="Inventory Management" Background="Transparent" IsVisible="False" Click="GoToInventory"/>
                    <Button x:Name="UserButton" Content="Add new user" Background="Transparent" IsVisible="False" Click="GoToAddUser"/>
                    <Button x:Name="ScheduleButton" Content="Work Schedule" Background="Transparent" IsVisible="False" Click="GoToCalendar"/>
                    <Button x:Name="QuitButton" Content="Quit Session" Background="Transparent" IsVisible="False" Click="GoToChooseUserTypePage" />
                </StackPanel>
            </SplitView.Pane>
        </SplitView>

        <Button x:Name="PanierButton" Click="OnShoppingCartClick" Margin="10" HorizontalAlignment="Right" VerticalAlignment="Top" Background="Transparent" BorderBrush="Transparent" ZIndex="2" IsVisible="False">
            <Image Source="avares://KitBox_Project/Assets/Panier.png" Width="32" Height="32"/>
        </Button>

        <!-- Contenu principal de l'application -->
        <ContentControl x:Name="MainContent"/> <!-- il sert d’espace réservé où tu peux charger différentes vues sans recréer toute la fenêtre. Un ContentControl dans Avalonia prend par défaut la taille de son parent. Grid : Le ContentControl est placé dans un Grid, et un Grid par défaut prend tout l'espace disponible dans la fenêtre, sauf indication contraire. Par conséquent, le ContentControl hérite de la taille du Grid et s'étendra pour occuper toute l'espace disponible. Il n'est donc pas nécessaire de spécifier HorizontalAlignment="Stretch" et VerticalAlignment="Stretch" dans ton <ContentControl x:Name="MainContent"/> -->
    </Grid>
</Window>